Best Time to Buy and Sell Stocks I Asked in Amazon & Facebook (Easy)

Problem Description

Say you have an array, A, for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (i.e, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Return the maximum possible profit.

Problem Constraints
0 <= len(A) <= 7e5
1 <= A[i] <= 1e7

Input Format
The first and the only argument is an array of integers, A.

Output Format
Return an integer, representing the maximum possible profit.

Example Input
Input 1:
 A = [1, 2]
Input 2:
 A = [1, 4, 5, 2, 4]

Example Output
Output 1:
 1
Output 2:
 4
 
 SOLUTION in CPP
 
 Using Stack (Time Complexity O(n))
 
 int Solution::maxProfit(const vector<int> &p) {
    stack<int> s;
        vector<int> v;
        if(p.size()==0)return 0;
        s.push(p[0]);
        for(int i=1;i<p.size();i++){
            if(p[i]<s.top()){
                s.push(p[i]);
            }
            else{
                int dif = abs(p[i]-s.top());
                v.push_back(dif);
            }
        }
    if(v.size()==0)return 0;
        sort(v.begin(),v.end());
        return v[v.size()-1];
}

Solution in Python 

class Solution:
    def maxProfit(self,prices):
        left = 0 #Buy
        right = 1 #Sell
        max_profit = 0
        while right < len(prices):
            currentProfit = prices[right] - prices[left] #our current Profit
            if prices[left] < prices[right]:
                max_profit =max(currentProfit,max_profit)
            else:
                left = right
            right += 1
        return max_profit 


Thanks, 
 
 
